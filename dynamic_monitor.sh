#!/bin/bash

# HTML log file
LOG_FILE="dynamic_performance_report.html"

# Initialize the HTML file with embedded CSS
function initialize_log() {
    cat <<EOF > "$LOG_FILE"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dynamic Performance Report</title>
    <style>
    body {
        font-family: -apple-system, system-ui, Helvetica, Arial, sans-serif;
        margin: auto;
        padding: 20px;
        background-color: #f4faff;
    }

    h1 {
        text-align: center;
        color: #333;
    }

    p {
        text-align: center;
        color: #555;
    }

    .container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 30px;
    }

    .metric-card {
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 300px;
        text-align: center;
    }

    .metric-card h2 {
        font-size: 1.5em;
        color: #444;
        margin-bottom: 10px;
    }

    .metric-card p {
        font-size: 1.2em;
        color: #666;
        margin: 0;
    }

    .progress-bar {
        width: 100%;
        background: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
        margin: 10px 0;
    }

    .progress-bar-fill {
        height: 20px;
        background: linear-gradient(90deg, #007bff, #00d4ff);
        transition: width 0.3s ease;
    }

    .footer {
        text-align: center;
        margin-top: 20px;
        color: #999;
    }

    </style>
</head>
<body>
    <h1>Dynamic Performance Report</h1>
    <p>Generated on: $(date)</p>
    <div class="container">
EOF
}

# Add a metric card with a progress bar
function add_metric_card() {
    local title="$1"
    local value="$2"
    cat <<EOF >> "$LOG_FILE"
        <div class="metric-card">
            <h2>$title</h2>
            <div class="progress-bar">
                <div class="progress-bar-fill" style="width: ${value}%;"></div>
            </div>
            <p>${value}%</p>
        </div>
EOF
}

# Add a metric card without a progress bar (e.g., text-only metrics)
function add_text_metric_card() {
    local title="$1"
    local value="$2"
    cat <<EOF >> "$LOG_FILE"
        <div class="metric-card">
            <h2>$title</h2>
            <p>$value</p>
        </div>
EOF
}

# Finalize the HTML file
function finalize_log() {
    cat <<EOF >> "$LOG_FILE"
    </div>
    <div class="footer">
        <p>Report generated by the Performance Metrics Tool</p>
    </div>
</body>
</html>
EOF
    zenity --info --title="Report Generated" --text="The report has been saved to $LOG_FILE."
}

# Interactive GUI to show menu
function show_menu() {
    zenity --list --title="Performance Metrics" \
        --text="Choose a metric to view or generate a report:" \
        --column="Option" --column="Description" \
        1 "View CPU Usage" \
        2 "View GPU Usage" \
        3 "View Memory Usage" \
        4 "View Disk Usage" \
        5 "View Network Stats" \
        6 "View System Load" \
        7 "Generate Report and Exit"
}

# Metric functions

function gpu() {
    gpu_usage=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)
    gpu_temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)
    gpu_memory=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits)
    result="GPU Utilization: $gpu_usage%\nGPU Temperature: $gpu_tempÂ°C\nGPU Memory Usage: $gpu_memory MiB"
    log_to_file "GPU Usage" "$result"
    zenity --info --title="GPU Usage" --text="$result" --width=300
}

function cpu_usage() {
    result=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
    zenity --info --title="CPU Usage" --text="CPU Usage: ${result}%" --width=300
}

function memory_usage() {
    total=$(grep MemTotal /proc/meminfo | awk '{print $2 / 1024 " MB"}')
    free=$(grep MemFree /proc/meminfo | awk '{print $2 / 1024 " MB"}')
    zenity --info --title="Memory Usage" --text="Total Memory: $total\nFree Memory: $free" --width=300
}

function disk_usage() {
    summary=$(df -h && sudo smartctl -H /dev/sda | grep "SMART Health Status")
    echo "$summary" | zenity --text-info --title="Disk Usage Summary" --width=600 --height=400
}

function network_stats() {
    interface="eth0"
    stats=$(grep "$interface" /proc/net/dev | awk '{print "RX Bytes: " $2 ", TX Bytes: " $10}')
    result="$(date): $stats"
    zenity --info --title="Network Stats" --text="$result" --width=400
}

function system_load() {
    load=$(uptime)
    zenity --info --title="System Load Metrics" --text="$load" --width=300
}

# Gather data and populate the HTML report
function generate_report() {
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
    memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
	interface="eth0"
    network_stats="$(grep "$interface" /proc/net/dev | awk '{print "RX Bytes: " $2 ", TX Bytes: " $10}')"
	result="$(date): $network_stats"
    system_load="$(uptime)"
	gpu_usage=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)
	gpu_temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)

    add_metric_card "CPU Usage" "$cpu_usage"
    add_metric_card "Memory Usage" "$memory_usage"
    add_metric_card "Disk Usage" "$disk_usage"
    add_metric_card "GPU Usage" "$gpu_usage"
    add_metric_card "GPU temp" "$gpu_temp"
    add_text_metric_card "Network Stats" "$result"
    add_text_metric_card "System Load" "$system_load"
}

# Main loop
initialize_log
while true; do
    option=$(show_menu)

    case $option in
        1) cpu_usage ;;
		2) gpu;;
        3) memory_usage ;;
        4) disk_usage ;;
        5) network_stats ;;
        6) system_load ;;
        7) generate_report; finalize_log; exit 0 ;;
        *) zenity --error --title="Invalid Option" --text="Please select a valid option." ;;
    esac
done
